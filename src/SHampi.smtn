
module SHampi where

import Debug.Trace

import Data.List
import qualified Data.Map as Map

import SChar
import RegEx
import Match

-- substring src offset length
substring :: [a] -> Integer -> Integer -> [a]
substring s o l = take l $ drop o s

contains :: (SChar c) => [c] -> String -> Bool
contains v s = isInfixOf (toSCharString s) v

assertIn :: (SChar c) => ((RID, Integer), (RID, Integer)) -> [((RID, Integer), RegEx)] -> [c] -> Bool -> RegEx -> Bool
assertIn regsbnd regs vstr b reg =
 let p = match (Map.fromList regs) reg vstr
 in if b then p else not p

