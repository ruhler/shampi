
module SeriGen where

import Data.List
import Seri.SMT.SMT
import SeriRegEx
import Fix

frees :: (Free a) => Integer -> Query [a]
frees x = sequence (replicate x free)

-- substring src offset length
substring :: [a] -> Integer -> Integer -> [a]
substring s o l = take l $ drop o s

match :: RegEx -> [Elem] -> Bool
match Epsilon str = null str
match Empty _ = False
match (Atom x) [c] = x == c
match (Atom _) _ = False
match (Range cmin cmax) [c] = cmin <= c && c <= cmax
match (Range _ _) _ = False
match (Concat _ a b) str =
  let (sa, sb) = splitAt (rlength a) str
  in match a sa && match b sb
match (Or _ a b) str = match a str || match b str

assertContains :: Map ID CFG -> ElemString -> Bool -> ID -> Bool
assertContains cfgs vstr b r =
 let rreg = fixN cfgs r (length vstr)
     p = match rreg vstr
 in if b then p else not p

